@using Localization
@model DataAccess.Site
@{
    ViewBag.Title = Model.Name;
    ViewBag.Link = Html.ActionLink("Back to " + Resources.LabelMonthsList, "Index", "Months", new { id = Model.Id }, null);
}
@Html.Partial("_PageTitlePartial")
@Html.Partial("_SiteDetailsPartial", @Model)

<div class="row">
    <div class="col-md-6">
        <h3>Bench Marking Comparisons</h3>
        <p>
            Showing:
            <ul>
                <li>
                    Your Actual (Current) performance; based on the data you entered;
                </li>
                <li>
                    Your <b>Projected</b> performance – the prediction of how you ought to be performing based on the current performance of sites which share your characteristics;
                </li>
                <li>
                    Your <b>Upper Projected</b> performance – the prediction of the level of performance you could expect to see if you implemented appropriate changes based on your existing configuration.
                </li>
            </ul>
        </p>
    </div>

    <div class="col-md-6">
        <h3>Understanding Your Report</h3>
        <p>
            Understanding your reports and taking action:
            <ul>
                <li>
                    <a href="@Url.Content("~/Content/Documents/Insight Resilience Toolkit 0 - Introduction.pdf")">Introduction</a>
                </li>
                <li>
                    <a href="@Url.Content("~/Content/Documents/Insight Resilience Toolkit 1 - Fitness.pdf")">Fitness</a>
                </li>
                <li>
                    <a href="@Url.Content("~/Content/Documents/Insight Resilience Toolkit 2 - Flexibility.pdf")">Flexibility</a>
                </li>
                <li>
                    <a href="@Url.Content("~/Content/Documents/Insight Resilience Toolkit 3 - Strategic.pdf")">Strategic</a>
                </li>
                <li>
                    <a href="@Url.Content("~/Content/Documents/Insight Resilience Toolkit 4 - Making Change Happen.pdf")">Making Change Happen</a>
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row" style="border-top: 1px solid;">
    <h4>Visitors</h4>
    <div id="visitorsChart" style="width: 700px; height: 300px;">
    </div>
</div>


<div class="row" style="border-top: 1px solid;">
    <h4>Admissions Income</h4>
    <div id="incomeChart" style="width: 700px; height: 300px;">
    </div>
</div>

<div class="row" style="border-top: 1px solid;">
    <h4>Retail Income Per Visitor</h4>
    <div id="retailIncomePerVisitorChart" style="width: 700px; height: 300px;">
    </div>
</div>

<div class="row" style="border-top: 1px solid;">
    <h4>Refreshment Income Per Visitor</h4>
    <div id="refreshmentIncomePerVisitorChart" style="width: 700px; height: 300px;">
    </div>
</div>

<div class="row">
    <span id="show" tabindex="0">[Show Data]</span>
    <pre id="rawData">
    </pre>
</div>

@section headerScripts
{
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    google.charts.load('current', {packages: ['corechart']});
    google.charts.setOnLoadCallback(drawCharts);

    function drawCharts() {
        var months = $.ajax({
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            cache: false,
            url: '@Url.Action("ReportData", new {id = Model.Id})',
            async: false
        }).responseJSON;
        makeVisitorsChart(months);
        makeAdmissionIncomeChart(months);
        makeRetailIncomePerVisitorChart(months);
        makeRefreshmentIncomePerVisitorChart(months);
        addRawData(months);
    }

    function makeVisitorsChart(months) {
        document.getElementById('visitorsChart').innerHTML = 'Data not available yet';
        var visitorsChartData = new google.visualization.DataTable();
        visitorsChartData.addColumn('date', 'Month');
        visitorsChartData.addColumn('number', 'Total Visitors');
        visitorsChartData.addColumn('number', 'Projected');
        visitorsChartData.addColumn('number', 'Upper Projected');
        for (var i = 0; i < months.length; i++) {
            visitorsChartData.addRow([
                new Date(months[i].MonthTime),
                months[i].VisitorsTotal,
                months[i].VisitorsTotalModel,
                months[i].VisitorsTotalModelUpper
            ]);
        }
        // Instantiate and draw our chart, passing in some options
        var incomeChart = new google.visualization.LineChart(document.getElementById('visitorsChart'));
        incomeChart.draw(visitorsChartData,
        {
            width: 700,
            height: 300,
            chartArea: { width: '50%' },
            hAxis: { format: 'MMM-yyyy' },
            vAxis: { title: "Visitor Numbers" }
        });
    }
    function makeAdmissionIncomeChart(months) {
        document.getElementById('incomeChart').innerHTML = 'Data not available yet';
        // Prepare the data table
        var incomeChartData = new google.visualization.DataTable();
        incomeChartData.addColumn('date', 'Month');
        incomeChartData.addColumn('number', 'Admissions Inome');
        incomeChartData.addColumn('number', 'Projected');
        incomeChartData.addColumn('number', 'Upper Projected');
        for (var i = 0; i < months.length; i++) {
            incomeChartData.addRow([
                new Date(months[i].MonthTime),
                months[i].IncomeAdmissions,
                months[i].IncomeAdmissionsModel,
                months[i].IncomeAdmissionsModelUpper
            ]);
        }
        // Instantiate and draw our chart, passing in some options
        var incomeChart = new google.visualization.LineChart(document.getElementById('incomeChart'));
        incomeChart.draw(incomeChartData,
        {
            width: 700,
            height: 300,
            chartArea: { width: '50%' },
            hAxis: { format: 'MMM-yyyy' },
            vAxis: { title: "Admissions Income", format: '£#,###' }
        });
    }

    function makeRetailIncomePerVisitorChart(months) {
        document.getElementById('retailIncomePerVisitorChart').innerHTML = 'Data not available yet';
        // Prepare the data table
        var retailIncomePerVisitorChartData = new google.visualization.DataTable();
        retailIncomePerVisitorChartData.addColumn('date', 'Month');
        retailIncomePerVisitorChartData.addColumn('number', 'Retail Income Per Visitor');
        retailIncomePerVisitorChartData.addColumn('number', 'Projected');
        retailIncomePerVisitorChartData.addColumn('number', 'Upper Projected');
        try {
            for (var i = 0; i < months.length; i++) {
                retailIncomePerVisitorChartData.addRow([
                    new Date(months[i].MonthTime),
                    months[i].RetailIncomePerVisitor,
                    months[i].RetailIncomePerVisitorModel,
                    months[i].RetailIncomePerVisitorModelUpper
                ]);
            }
            // Instantiate and draw our chart, passing in some options
            var incomePerVisitorChart = new google.visualization.LineChart(document.getElementById('retailIncomePerVisitorChart'));
            incomePerVisitorChart.draw(retailIncomePerVisitorChartData,
            {
                width: 700,
                height: 300,
                chartArea: { width: '50%' },
                hAxis: { format: 'MMM-yyyy' },
                vAxis: { title: "Retail Income Per Visitor", format: '£0.00' }
            });
        } catch (err) {
            document.getElementById('retailIncomePerVisitorChart').innerHTML = 'Complete data not available for graph</br>' +
                '<i>' + err.message + '</i>';
        }
    }

    function makeRefreshmentIncomePerVisitorChart(months) {
        document.getElementById('refreshmentIncomePerVisitorChart').innerHTML = 'Data not available yet';
        // Prepare the data table
        var refreshmentIncomePerVisitorChartData = new google.visualization.DataTable();
        refreshmentIncomePerVisitorChartData.addColumn('date', 'Month');
        refreshmentIncomePerVisitorChartData.addColumn('number', 'Refreshment Income Per Visitor');
        refreshmentIncomePerVisitorChartData.addColumn('number', 'Projected');
        refreshmentIncomePerVisitorChartData.addColumn('number', 'Upper Projected');
        try {
            for (var i = 0; i < months.length; i++) {
                refreshmentIncomePerVisitorChartData.addRow([
                    new Date(months[i].MonthTime),
                    months[i].RefreshmentIncomePerVisitor,
                    months[i].RefreshmentIncomePerVisitorModel,
                    months[i].RefreshmentIncomePerVisitorModelUpper
                ]);
            }
            // Instantiate and draw our chart, passing in some options
            var incomePerVisitorChart = new google.visualization.LineChart(document.getElementById('refreshmentIncomePerVisitorChart'));
            incomePerVisitorChart.draw(refreshmentIncomePerVisitorChartData,
            {
                width: 700,
                height: 300,
                chartArea: { width: '50%' },
                hAxis: { format: 'MMM-yyyy' },
                vAxis: { title: "Refreshment Income Per Visitor", format: '£0.00' }
            });
        } catch (err) {
            document.getElementById('refreshmentIncomePerVisitorChart').innerHTML = 'Complete data not available for graph</br>' +
                '<i>' + err.message + '</i>';
        }
    }

    function addRawData(siteData) {
        var siteData = JSON.stringify(siteData, undefined, 2);
        document.getElementById('rawData').innerHTML = siteData;
    }

    function round(number) {
        return Math.round(number * 100) / 100;
    }
</script>
}
